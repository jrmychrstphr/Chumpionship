import json
from pathlib import Path

from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

import operator
import random



###############
# Opens a Firefox webdriver #
# sets gloabl var 'driver' #

def open_browser():
	# Open browser
	global driver
	driver = webdriver.Firefox()
	print("Browser opened")

	
###############
# Closes browser #

def close_browser():
	#close browser
	driver.quit()
	print("Browser closed")


###############
# Loads a .json file from the same directory as this script file #
# returns the result  #

def return_load_json_file(filename):

	print("loading file... ", filename)

	try:
		f = open(filename)
		json_data = json.load(f)
		f.close()

	except:
		print("Error: Failed to load file")
	else:
		print("Success!")
		return json_data


###############
# Searches 'player_data' in database #
# Creates a list of all 'fpl_code' values #
# Returns the result #

def return_manager_codes_as_list():

	manager_codes = []

	#create a list contaiing the FPL code of every manager in the database
	for key, val in database['player_data'].items():

		manager_fpl_code = val['manager_info']['fpl_code']
		manager_codes.append(manager_fpl_code)

	return manager_codes


###############
# Searches 'player_data' in database #
# Returns the value of 'team_name' #
# for the player with defined 'manager_code' #

def return_lookup_team_name(manager_code):

	for key, val in database['player_data'].items():

		idx = key 
		#print('key: ', key)

		if val['manager_info']['fpl_code'] == manager_code:
			team_name = val['manager_info']['team_name']
			return team_name


###############
# Searches 'player_data' in database #
# Returns the value of 'manager_fullname' #
# for the player with defined 'manager_code' #

def return_lookup_manager_fullname(manager_code):

	for key, val in database['player_data'].items():

		if val['manager_info']['fpl_code'] == manager_code:
			manager_fullname = val['manager_info']['manager_fullname']
			return manager_fullname



###############
# Scans 'player_data' in the database #
# Counts the number of values stored in 'fixtures' to define a season length #
# Returns the season leangth IF all lengths are the same  #

# Database MUST have fixtures defined before calling this function  #

def return_count_fixtures():

	fixtures_count = []

	manager_codes = return_manager_codes_as_list()
	
	#create a list contaiing the FPL code of every manager in the database
	for key, val in database['player_data'].items():

		player_idx = key
		player_data = val

		fixtures_count.append(len(val['fixtures']))

	def all_same(items):
		return all(x == items[0] for x in items)

	if all_same(fixtures_count):
		#print('Gameweeks: ', fixtures_count[0])
		return  fixtures_count[0]
	else:
		print('Error: Inconsistent season lengths')


###############
# Scrapes FPL league matches page for each manager #
# Returns a dict of each team's fixture opponent by gameweek #

def scrape_and_return_fixture_data():

	#grab the league's FPL code from the database
	league_code = database['league_data']['fpl_league_code']

	player_fixture_lists = {}

	#for each code in the list 'manager_codes'...
	for manager_code in return_manager_codes_as_list():

		player_fixture_lists[manager_code] = {}

		fixture_data = {}
		fpl_fixtures_page_url = "https://fantasy.premierleague.com/leagues/" + league_code + "/matches/h?entry=" + manager_code

		try:
			print("Loading fixtures page for: ", return_lookup_manager_fullname(manager_code))

			#open the manager's league matches page
			driver.get(fpl_fixtures_page_url)
			
			#wait for the fixture table to appear in DOM
			element = WebDriverWait(driver, 10).until(
				EC.presence_of_element_located((By.CSS_SELECTOR, "table.Table-ziussd-1.MatchesTable-sc-1p0h4g1-0.bPMfKH"))
			)
			
		except:
			#if the table is not found, display an error message
			print("Error: League table element not found")
		
		else:
			#if the table is found, display successs message
			print("Success!")

			#create soup of DOM
			soup = BeautifulSoup(driver.page_source, 'lxml')

			#filter to the tr elements wirth fixtures
			table_rows = soup.select("table.Table-ziussd-1.MatchesTable-sc-1p0h4g1-0.bPMfKH tbody tr")

			#scrape FPL fixture list for each team in the database
			for row in table_rows:
				item_array = row.contents

				gameweek = str("{0:0=2d}".format(int(item_array[0].get_text())))

				for x in item_array:
					if "MatchesEntry" in str(x):
						code = x.find('a').get('href').split('/')[2]
						#print(x.find('a').get('href').split('/')[2])

						# The DOM will have 2 matching hrefs for each fixture
						# The href that does not contain the current manager_code will be the opponent's code
						if code != manager_code:
							opponent_code = code

				player_fixture_lists[manager_code][gameweek] = opponent_code

	return player_fixture_lists


f = {'1177142': {'01': '2291681', '02': '2120821', '03': '580531', '04': '4872589', '05': '3004339', '06': '1575824', '07': '780525', '08': '2172588', '09': '2167270', '10': '1400511', '11': '544163', '12': '452180', '13': '1266186', '14': '2557931', '15': '2434704', '16': '1192876', '17': '255846', '18': '3328568', '19': '3238760', '20': '2291681', '21': '2120821', '22': '580531', '23': '4872589', '24': '3004339', '25': '1575824', '26': '780525', '27': '2172588', '28': '2167270', '29': '1400511', '30': '544163', '31': '452180', '32': '1266186', '33': '2557931', '34': '2434704', '35': '1192876', '36': '255846', '37': '3328568', '38': '3238760'}, '1192876': {'01': '780525', '02': '2172588', '03': '2167270', '04': '1400511', '05': '544163', '06': '452180', '07': '1266186', '08': '2557931', '09': '2434704', '10': '2291681', '11': '255846', '12': '3328568', '13': '2120821', '14': '3238760', '15': '4872589', '16': '1177142', '17': '1575824', '18': '580531', '19': '3004339', '20': '780525', '21': '2172588', '22': '2167270', '23': '1400511', '24': '544163', '25': '452180', '26': '1266186', '27': '2557931', '28': '2434704', '29': '2291681', '30': '255846', '31': '3328568', '32': '2120821', '33': '3238760', '34': '4872589', '35': '1177142', '36': '1575824', '37': '580531', '38': '3004339'}, '1266186': {'01': '1400511', '02': '780525', '03': '452180', '04': '2167270', '05': '2557931', '06': '544163', '07': '1192876', '08': '2291681', '09': '3328568', '10': '2434704', '11': '3238760', '12': '255846', '13': '1177142', '14': '2120821', '15': '580531', '16': '4872589', '17': '3004339', '18': '1575824', '19': '2172588', '20': '1400511', '21': '780525', '22': '452180', '23': '2167270', '24': '2557931', '25': '544163', '26': '1192876', '27': '2291681', '28': '3328568', '29': '2434704', '30': '3238760', '31': '255846', '32': '1177142', '33': '2120821', '34': '580531', '35': '4872589', '36': '3004339', '37': '1575824', '38': '2172588'}, '1400511': {'01': '1266186', '02': '2557931', '03': '2434704', '04': '1192876', '05': '255846', '06': '3328568', '07': '2120821', '08': '3238760', '09': '4872589', '10': '1177142', '11': '1575824', '12': '580531', '13': '2172588', '14': '3004339', '15': '2291681', '16': '780525', '17': '452180', '18': '2167270', '19': '544163', '20': '1266186', '21': '2557931', '22': '2434704', '23': '1192876', '24': '255846', '25': '3328568', '26': '2120821', '27': '3238760', '28': '4872589', '29': '1177142', '30': '1575824', '31': '580531', '32': '2172588', '33': '3004339', '34': '2291681', '35': '780525', '36': '452180', '37': '2167270', '38': '544163'}, '1575824': {'01': '255846', '02': '3328568', '03': '2120821', '04': '3238760', '05': '4872589', '06': '1177142', '07': '2291681', '08': '580531', '09': '2172588', '10': '3004339', '11': '1400511', '12': '780525', '13': '452180', '14': '2167270', '15': '2557931', '16': '544163', '17': '1192876', '18': '1266186', '19': '2434704', '20': '255846', '21': '3328568', '22': '2120821', '23': '3238760', '24': '4872589', '25': '1177142', '26': '2291681', '27': '580531', '28': '2172588', '29': '3004339', '30': '1400511', '31': '780525', '32': '452180', '33': '2167270', '34': '2557931', '35': '544163', '36': '1192876', '37': '1266186', '38': '2434704'}, '2120821': {'01': '4872589', '02': '1177142', '03': '1575824', '04': '580531', '05': '2172588', '06': '3004339', '07': '1400511', '08': '780525', '09': '452180', '10': '2167270', '11': '2557931', '12': '544163', '13': '1192876', '14': '1266186', '15': '3328568', '16': '2434704', '17': '3238760', '18': '255846', '19': '2291681', '20': '4872589', '21': '1177142', '22': '1575824', '23': '580531', '24': '2172588', '25': '3004339', '26': '1400511', '27': '780525', '28': '452180', '29': '2167270', '30': '2557931', '31': '544163', '32': '1192876', '33': '1266186', '34': '3328568', '35': '2434704', '36': '3238760', '37': '255846', '38': '2291681'}, '2167270': {'01': '2557931', '02': '544163', '03': '1192876', '04': '1266186', '05': '3328568', '06': '2434704', '07': '3238760', '08': '255846', '09': '1177142', '10': '2120821', '11': '580531', '12': '4872589', '13': '3004339', '14': '1575824', '15': '780525', '16': '2172588', '17': '2291681', '18': '1400511', '19': '452180', '20': '2557931', '21': '544163', '22': '1192876', '23': '1266186', '24': '3328568', '25': '2434704', '26': '3238760', '27': '255846', '28': '1177142', '29': '2120821', '30': '580531', '31': '4872589', '32': '3004339', '33': '1575824', '34': '780525', '35': '2172588', '36': '2291681', '37': '1400511', '38': '452180'}, '2172588': {'01': '2434704', '02': '1192876', '03': '255846', '04': '3328568', '05': '2120821', '06': '3238760', '07': '4872589', '08': '1177142', '09': '1575824', '10': '580531', '11': '2291681', '12': '3004339', '13': '1400511', '14': '780525', '15': '452180', '16': '2167270', '17': '2557931', '18': '544163', '19': '1266186', '20': '2434704', '21': '1192876', '22': '255846', '23': '3328568', '24': '2120821', '25': '3238760', '26': '4872589', '27': '1177142', '28': '1575824', '29': '580531', '30': '2291681', '31': '3004339', '32': '1400511', '33': '780525', '34': '452180', '35': '2167270', '36': '2557931', '37': '544163', '38': '1266186'}, '2291681': {'01': '1177142', '02': '452180', '03': '4872589', '04': '544163', '05': '580531', '06': '2557931', '07': '1575824', '08': '1266186', '09': '3004339', '10': '1192876', '11': '2172588', '12': '2434704', '13': '780525', '14': '3328568', '15': '1400511', '16': '255846', '17': '2167270', '18': '3238760', '19': '2120821', '20': '1177142', '21': '452180', '22': '4872589', '23': '544163', '24': '580531', '25': '2557931', '26': '1575824', '27': '1266186', '28': '3004339', '29': '1192876', '30': '2172588', '31': '2434704', '32': '780525', '33': '3328568', '34': '1400511', '35': '255846', '36': '2167270', '37': '3238760', '38': '2120821'}, '2434704': {'01': '2172588', '02': '3004339', '03': '1400511', '04': '780525', '05': '452180', '06': '2167270', '07': '2557931', '08': '544163', '09': '1192876', '10': '1266186', '11': '3328568', '12': '2291681', '13': '3238760', '14': '255846', '15': '1177142', '16': '2120821', '17': '580531', '18': '4872589', '19': '1575824', '20': '2172588', '21': '3004339', '22': '1400511', '23': '780525', '24': '452180', '25': '2167270', '26': '2557931', '27': '544163', '28': '1192876', '29': '1266186', '30': '3328568', '31': '2291681', '32': '3238760', '33': '255846', '34': '1177142', '35': '2120821', '36': '580531', '37': '4872589', '38': '1575824'}, '2557931': {'01': '2167270', '02': '1400511', '03': '544163', '04': '452180', '05': '1266186', '06': '2291681', '07': '2434704', '08': '1192876', '09': '255846', '10': '3328568', '11': '2120821', '12': '3238760', '13': '4872589', '14': '1177142', '15': '1575824', '16': '580531', '17': '2172588', '18': '3004339', '19': '780525', '20': '2167270', '21': '1400511', '22': '544163', '23': '452180', '24': '1266186', '25': '2291681', '26': '2434704', '27': '1192876', '28': '255846', '29': '3328568', '30': '2120821', '31': '3238760', '32': '4872589', '33': '1177142', '34': '1575824', '35': '580531', '36': '2172588', '37': '3004339', '38': '780525'}, '255846': {'01': '1575824', '02': '580531', '03': '2172588', '04': '3004339', '05': '1400511', '06': '780525', '07': '452180', '08': '2167270', '09': '2557931', '10': '544163', '11': '1192876', '12': '1266186', '13': '3328568', '14': '2434704', '15': '3238760', '16': '2291681', '17': '1177142', '18': '2120821', '19': '4872589', '20': '1575824', '21': '580531', '22': '2172588', '23': '3004339', '24': '1400511', '25': '780525', '26': '452180', '27': '2167270', '28': '2557931', '29': '544163', '30': '1192876', '31': '1266186', '32': '3328568', '33': '2434704', '34': '3238760', '35': '2291681', '36': '1177142', '37': '2120821', '38': '4872589'}, '3004339': {'01': '3328568', '02': '2434704', '03': '3238760', '04': '255846', '05': '1177142', '06': '2120821', '07': '580531', '08': '4872589', '09': '2291681', '10': '1575824', '11': '780525', '12': '2172588', '13': '2167270', '14': '1400511', '15': '544163', '16': '452180', '17': '1266186', '18': '2557931', '19': '1192876', '20': '3328568', '21': '2434704', '22': '3238760', '23': '255846', '24': '1177142', '25': '2120821', '26': '580531', '27': '4872589', '28': '2291681', '29': '1575824', '30': '780525', '31': '2172588', '32': '2167270', '33': '1400511', '34': '544163', '35': '452180', '36': '1266186', '37': '2557931', '38': '1192876'}, '3238760': {'01': '580531', '02': '4872589', '03': '3004339', '04': '1575824', '05': '780525', '06': '2172588', '07': '2167270', '08': '1400511', '09': '544163', '10': '452180', '11': '1266186', '12': '2557931', '13': '2434704', '14': '1192876', '15': '255846', '16': '3328568', '17': '2120821', '18': '2291681', '19': '1177142', '20': '580531', '21': '4872589', '22': '3004339', '23': '1575824', '24': '780525', '25': '2172588', '26': '2167270', '27': '1400511', '28': '544163', '29': '452180', '30': '1266186', '31': '2557931', '32': '2434704', '33': '1192876', '34': '255846', '35': '3328568', '36': '2120821', '37': '2291681', '38': '1177142'}, '3328568': {'01': '3004339', '02': '1575824', '03': '780525', '04': '2172588', '05': '2167270', '06': '1400511', '07': '544163', '08': '452180', '09': '1266186', '10': '2557931', '11': '2434704', '12': '1192876', '13': '255846', '14': '2291681', '15': '2120821', '16': '3238760', '17': '4872589', '18': '1177142', '19': '580531', '20': '3004339', '21': '1575824', '22': '780525', '23': '2172588', '24': '2167270', '25': '1400511', '26': '544163', '27': '452180', '28': '1266186', '29': '2557931', '30': '2434704', '31': '1192876', '32': '255846', '33': '2291681', '34': '2120821', '35': '3238760', '36': '4872589', '37': '1177142', '38': '580531'}, '452180': {'01': '544163', '02': '2291681', '03': '1266186', '04': '2557931', '05': '2434704', '06': '1192876', '07': '255846', '08': '3328568', '09': '2120821', '10': '3238760', '11': '4872589', '12': '1177142', '13': '1575824', '14': '580531', '15': '2172588', '16': '3004339', '17': '1400511', '18': '780525', '19': '2167270', '20': '544163', '21': '2291681', '22': '1266186', '23': '2557931', '24': '2434704', '25': '1192876', '26': '255846', '27': '3328568', '28': '2120821', '29': '3238760', '30': '4872589', '31': '1177142', '32': '1575824', '33': '580531', '34': '2172588', '35': '3004339', '36': '1400511', '37': '780525', '38': '2167270'}, '4872589': {'01': '2120821', '02': '3238760', '03': '2291681', '04': '1177142', '05': '1575824', '06': '580531', '07': '2172588', '08': '3004339', '09': '1400511', '10': '780525', '11': '452180', '12': '2167270', '13': '2557931', '14': '544163', '15': '1192876', '16': '1266186', '17': '3328568', '18': '2434704', '19': '255846', '20': '2120821', '21': '3238760', '22': '2291681', '23': '1177142', '24': '1575824', '25': '580531', '26': '2172588', '27': '3004339', '28': '1400511', '29': '780525', '30': '452180', '31': '2167270', '32': '2557931', '33': '544163', '34': '1192876', '35': '1266186', '36': '3328568', '37': '2434704', '38': '255846'}, '544163': {'01': '452180', '02': '2167270', '03': '2557931', '04': '2291681', '05': '1192876', '06': '1266186', '07': '3328568', '08': '2434704', '09': '3238760', '10': '255846', '11': '1177142', '12': '2120821', '13': '580531', '14': '4872589', '15': '3004339', '16': '1575824', '17': '780525', '18': '2172588', '19': '1400511', '20': '452180', '21': '2167270', '22': '2557931', '23': '2291681', '24': '1192876', '25': '1266186', '26': '3328568', '27': '2434704', '28': '3238760', '29': '255846', '30': '1177142', '31': '2120821', '32': '580531', '33': '4872589', '34': '3004339', '35': '1575824', '36': '780525', '37': '2172588', '38': '1400511'}, '580531': {'01': '3238760', '02': '255846', '03': '1177142', '04': '2120821', '05': '2291681', '06': '4872589', '07': '3004339', '08': '1575824', '09': '780525', '10': '2172588', '11': '2167270', '12': '1400511', '13': '544163', '14': '452180', '15': '1266186', '16': '2557931', '17': '2434704', '18': '1192876', '19': '3328568', '20': '3238760', '21': '255846', '22': '1177142', '23': '2120821', '24': '2291681', '25': '4872589', '26': '3004339', '27': '1575824', '28': '780525', '29': '2172588', '30': '2167270', '31': '1400511', '32': '544163', '33': '452180', '34': '1266186', '35': '2557931', '36': '2434704', '37': '1192876', '38': '3328568'}, '780525': {'01': '1192876', '02': '1266186', '03': '3328568', '04': '2434704', '05': '3238760', '06': '255846', '07': '1177142', '08': '2120821', '09': '580531', '10': '4872589', '11': '3004339', '12': '1575824', '13': '2291681', '14': '2172588', '15': '2167270', '16': '1400511', '17': '544163', '18': '452180', '19': '2557931', '20': '1192876', '21': '1266186', '22': '3328568', '23': '2434704', '24': '3238760', '25': '255846', '26': '1177142', '27': '2120821', '28': '580531', '29': '4872589', '30': '3004339', '31': '1575824', '32': '2291681', '33': '2172588', '34': '2167270', '35': '1400511', '36': '544163', '37': '452180', '38': '2557931'}}


###############
# Adds the following to input:
# + fixture_class: Randomised Home and Away fixture class
# + opponent_manager_fullname: Full name of opponent manager
# + opponent_team_name: Name of opponent team

# Returns the result formatted as json / dict #

# Input MUST be the result of the return_scraped_fixture_data() function #
		
def compile_weekly_fixtures(input_dict):

	weekly_fixtures = {}

	for player_code, val in input_dict.items():
		for gw, opp_code in val.items():
			
			# if the gameweek is not in the dict, add it
			if gw not in weekly_fixtures:
				weekly_fixtures[gw] = []

	for gw in weekly_fixtures:

		print(gw)	
		manager_codes = return_manager_codes_as_list()
		random.shuffle(manager_codes)

		while len(manager_codes) > 0:

			team_a = manager_codes[0]
			team_b = input_dict[manager_codes[0]][gw]

			manager_codes.remove(team_a)				
			manager_codes.remove(team_b)

			fixture_obj = {}

			#check if fixture has already occurred earlier in the season
			if int(gw) > 1:
				for week, fixtures in weekly_fixtures.items():
					for fixture in fixtures:
						if (fixture['home_team'] == team_a or fixture['home_team'] == team_b) and (fixture['away_team'] == team_a or fixture['away_team'] == team_b):
							
							home_team = team_a
							away_team = team_b

						else: 
							home_team = team_b
							away_team = team_a


			fixture_obj['home_team'] = team_b
			fixture_obj['away_team'] = team_a

			weekly_fixtures[gw].append(fixture_obj)

			continue

	return weekly_fixtures


###############
# Pushes 'fixture_list' to database
def push_fixtures_to_database(fixtures):
	database['fixture_list'] = fixtures

###############
# write data to json file
def write_to_json_file(filename, input_data):
    with open(filename, 'w') as json_file:
        json.dump(input_data, json_file, sort_keys=True, indent=4, separators=(',', ': '))




##############
def execute(): 

	global database
	database = return_load_json_file('_versions/chumpionship_2021_database-new-history.json')

	open_browser()

	#push_fixtures_to_database(compile_weekly_fixtures(scrape_and_return_fixture_data()))
	push_fixtures_to_database(compile_weekly_fixtures(f))
	
	close_browser()

	print(database)
	
	write_to_json_file('_versions/chumpionship_2021_database-new-history-fixtures.json', database)


execute()